name: client_wasm

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  setup:
    uses: ./.github/workflows/download-circuits.yaml
  build:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    name: client_wasm on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2

      # Install the generic nightly toolchain
      - run: rustup toolchain install nightly-2024-10-28 --profile minimal --no-self-update

      # Add the `rust-src` component and wasm target for WebAssembly builds
      - run: |
          rustup component add rust-src --toolchain nightly-2024-10-28
          rustup target add wasm32-unknown-unknown --toolchain nightly-2024-10-28

      # Add platform-specific targets
      - run: rustup target add x86_64-unknown-linux-gnu --toolchain nightly-2024-10-28
        if: matrix.os == 'ubuntu-latest'

      - run: rustup target add aarch64-apple-darwin --toolchain nightly-2024-10-28
        if: matrix.os == 'macos-latest'

      - run: sudo apt install -y protobuf-compiler
        if: matrix.os == 'ubuntu-latest'

      - name: Install LLVM and Clang to support 'ring' crate and protobuf
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@18 # https://formulae.brew.sh/formula/llvm#default
          echo /opt/homebrew/opt/llvm@18/bin >> $GITHUB_PATH
          brew install protobuf

      - name: Install unzip (linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install unzip -y

      - name: Cache Chrome
        if: matrix.os == 'ubuntu-latest'
        id: chrome-cache
        uses: actions/cache@v4
        with:
          path: chrome-linux64
          key: chrome-linux64-132.0.6834.110

      - name: Download Chrome (if not cached)
        if: matrix.os == 'ubuntu-latest' && steps.chrome-cache.outputs.cache-hit != 'true'
        run: |
          # https://googlechromelabs.github.io/chrome-for-testing/#stable
          wget -q "https://storage.googleapis.com/chrome-for-testing-public/132.0.6834.110/linux64/chrome-linux64.zip"
          unzip chrome-linux64.zip
          rm chrome-linux64.zip

      - name: Restore circuit artifacts
        uses: actions/cache@v3
        with:
          path: proofs/web_proof_circuits
          key: ${{ needs.setup.outputs.cache-key }}

      # - name: compile wasm
      #   run: |
      #     make wasm

      - name: Run WASM tests
        if: matrix.os == 'ubuntu-latest'
        run: |
          RUST_LOG=DEBUG cargo +nightly-2024-10-28 run --release -p notary -- --config ./fixture/notary-config.toml  --manifest ./fixture/notary.origo_tcp_local.json &
          sleep 30
          export PATH=$PATH:$PWD/chrome-linux64
          cd client_wasm
          export RUST_LOG=wasm_bindgen_test_runner
          rustup run nightly-2024-10-28 ~/.cargo/bin/wasm-pack test --chrome --headless -- -Z build-std=panic_abort,std

      - run: "tar czf pkg.tar.gz ./pkg/*"
        if: matrix.os == 'ubuntu-latest'
        working-directory: "client_wasm"

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: "wasm.tar.gz"
          path: "client_wasm/pkg.tar.gz"
