name: client_ios

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    uses: ./.github/workflows/download-circuits.yaml
  build:
    needs: setup
    name: client_ios
    runs-on: macos-latest

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain and target
        run: |
          rustup toolchain install nightly-2024-10-28 --profile minimal --no-self-update
          rustup component add rust-src --toolchain nightly-2024-10-28
          rustup target add aarch64-apple-ios --toolchain nightly-2024-10-28
          rustup target add aarch64-apple-ios-sim --toolchain nightly-2024-10-28

      # TODO: do we need llvm for this?
      - name: Install LLVM and Clang to support 'ring' crate and protobuf for witnesscalc
        run: |
          brew install llvm@18 # https://formulae.brew.sh/formula/llvm#default
          echo /opt/homebrew/opt/llvm@18/bin >> $GITHUB_PATH
          brew install protobuf

      - name: Restore circuit artifacts
        uses: actions/cache@v3
        with:
          path: proofs/web_proof_circuits
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Compile iOS
        run: |
          make ios
          make ios-sim

      - uses: actions/upload-artifact@v4
        with:
          name: "libclient_ios.a"
          path: "target/aarch64-apple-ios/release/libclient_ios.a"

      - uses: actions/upload-artifact@v4
        with:
          name: "libclient_ios_sim.a"
          path: "target/aarch64-apple-ios-sim/release/libclient_ios.a"

      - uses: actions/upload-artifact@v4
        with:
          name: "libclient_ios.h"
          path: "client_ios/headers/libclient_ios.h"

      - uses: actions/upload-artifact@v4
        with:
          name: "libclient_ios.xcframework"
          path: "target/aarch64-apple-ios/release/libclient_ios.xcframework"

  build-demo:
    needs: build
    name: build-demo
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: check xcode version
        run: |
          /usr/bin/xcodebuild -version

          - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: move over ios xcframework
        run: |
          cp -r target/aarch64-apple-ios-sim/release/libclient_ios.xcframework

        # This will need the notary and the wasm-demo to run somewhere. 
      - name: Build app
        run: |
          cd client_ios/demo
          xcode build
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision